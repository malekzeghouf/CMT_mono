services:

#-----------------------tracing--------------------------------
  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - microservices-net
    restart: unless-stopped
#---------------------monitoring---------------------------------
  prometehus:
    container_name: prometehus
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - prom:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - microservices-net
    restart: unless-stopped

  grafana:
    container_name: grafana
    image: grafana/grafana
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
      - GF_FEATURE_TOGGLES_ENABLE=accessControlOnCall
      - GF_INSTALL_PLUGINS=https://storage.googleapis.com/integration-artifacts/grafana-lokiexplore-app/grafana-lokiexplore-app-latest.zip;grafana-lokiexplore-app
    ports:
      - "3000:3000"
    depends_on:
      prometehus:
        condition: service_started
    volumes:
      - graph:/var/lib/grafana
    networks:
      - microservices-net
    restart: unless-stopped

#-----------------Log-aggregation-&-Monitoring---------------------------------

#----------------- Databases & DB-EXPORTERS --------------------------------------------------

#---postgres---
  postgresql:
    container_name: postgresql
    image: postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PW}
      PGDATA: /data/postgres
      TZ: ${TZ}
      # default db to be created       test: ["CMD-SHELL", "pg_isready -U seif"]
      POSTGRES_DB: product
    healthcheck:
      #for specefic db use test: ["CMD-SHELL", "pg_isready -d dbName -U dbUser "]
      #for multiple use bash script to do those and call it in the test cmd
      test: ["CMD-SHELL", "pg_isready  -U ${DB_USER}"]
      interval: 30s
      timeout: 5s
      retries: 5
    #adding the other dbs
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - microservices-net
    restart: unless-stopped

  postgres-exporter:
    container_name: postgres-exporter
    image: bitnami/postgres-exporter:latest
    environment:
      #for specefic db  "postgresql://USER_NAME:USER_PW@IP_ADDRESS:PORT/DB_NAME?sslmode=disable"
      DATA_SOURCE_NAME: "postgresql://${DB_USER}:{DB_PW}@localhost:5432/postgres?sslmode=disable"
      POSTGRES_EXPORTER_WEB_LISTEN_ADDRESS: 0.0.0.0:9187
    ports:
      - "9187:9187"
    depends_on:
      postgresql:
        condition: service_healthy
      prometehus:
        condition: service_started
    restart: unless-stopped


  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - microservices-net
    restart: unless-stopped

#------mongoDB
  mongodb:
    image: mongo
    container_name: mongo_db
    ports:
      - 27017:27017
    volumes:
      - mongo:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${DB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${DB_PW}
    networks:
      - microservices-net
    restart: unless-stopped

  mongo-express:
    image: mongo-express
    container_name: mongo_express
    ports:
      - 8081:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=seif
      - ME_CONFIG_MONGODB_ADMINPASSWORD=seif
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_URL="mongodb://localhost:27017"
    depends_on:
      - mongodb
    networks:
      - microservices-net
    restart: unless-stopped

#----Redis-------
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    # (--appendonly yes -> write operations Logged,high durability redis replay-events)
    # (--save handle snapshot intervals of rules to save snapshots  , 1st-arg last X-second : 2nd-arg Y-nKeyChanged)
    command: ["redis-server", "--appendonly", "yes", "--save", "900 1", "--save", "300 10", "--save", "60 10000"]
    volumes:
      - redis_data:/data
    networks:
      - microservices-net
    restart: unless-stopped
#-----------------Messaging services-------------------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 10
      ZOOKEEPER_SYNC_LIMIT: 5
    volumes:
      - /zookeeper-data:/var/lib/zookeeper
      - /zookeeper-log:/var/log/zookeeper
    ports:
      - "2181:2181"
    networks:
      - microservices-net
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.43.10:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_NUM_PARTITIONS: 6
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - /kafka-data:/var/lib/kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - microservices-net
    restart: unless-stopped

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
      JVM_OPTS: "-Xms32M -Xmx64M"
    networks:
      - microservices-net
    restart: unless-stopped

#-----------------Email-Similators------------------------------------------

#  mail-dev:
#    container_name: ms-mail-dev
#    image: maildev/maildev
#    ports:
#      - 1080:1080
#      - 1025:1025
  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    ports:
      - "1025:1025" # SMTP server
      - "8025:8025" # Web UI

#-------------Docker-Networks & volumes -----------------------------------
networks:
  microservices-net:
    driver: bridge
volumes:
  postgres:
  pgadmin:
  mongo:
  prom:
  graph:
  loki:
  fluentd:
  fluentbit:
  kafka:
  redis_data:
